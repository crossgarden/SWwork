#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <unordered_map>

class VoicePhishingDetector {
private:
    std::vector<std::string> phishingAccounts;

public:
    VoicePhishingDetector(const std::string& filename) {
        std::ifstream database(filename);
        if (!database.is_open()) {
            std::cerr << "Error: Could not open file " << filename << std::endl;
            return;
        }
        std::string line;

        while (std::getline(database, line)) {
            std::istringstream iss(line);
            std::string cardNumber, name, accountNumber;
            int balance;

            std::getline(iss, cardNumber, ',');
            std::getline(iss, name, ',');
            std::getline(iss, accountNumber, ',');
            iss >> balance;

            if (accountNumber[0] == '!') {
                phishingAccounts.push_back(accountNumber.substr(1));
            }
        }

        database.close();
    }

    bool isVoicePhishingAccount(const std::string& accountNumber) const {
        for (const std::string& phishingAccount : phishingAccounts) {
            if (accountNumber == phishingAccount) {
                return true;
            }
        }
        return false;
    }
};

class CardReader {
private:
    std::unordered_map<std::string, std::pair<std::string, int>> cardDatabase;
    std::string cardNumber;
    std::string userName;
    int balance;

public:
    CardReader(const std::string& filename) {
        std::ifstream database(filename);
        if (!database.is_open()) {
            std::cerr << "Error: Could not open file " << filename << std::endl;
            return;
        }
        std::string line;

        while (std::getline(database, line)) {
            std::istringstream iss(line);
            std::string cardNumber, name, accountNumber;
            int balance;

            std::getline(iss, cardNumber, ',');
            std::getline(iss, name, ',');
            std::getline(iss, accountNumber, ',');
            iss >> balance;

            cardDatabase[cardNumber] = { name, balance };
        }

        database.close();
    }

    bool verifyCard(const std::string& enteredCardNumber) {
        auto it = cardDatabase.find(enteredCardNumber);
        if (it != cardDatabase.end()) {
            cardNumber = enteredCardNumber;
            userName = it->second.first;
            balance = it->second.second;
            return true;
        }
        return false;
    }

    int getBalance() const {
        return balance;
    }

    void setBalance(int newBalance) {
        balance = newBalance;
        cardDatabase[cardNumber].second = newBalance;
    }

    std::string getUserName() const {
        return userName;
    }

    void deposit(int amount) {
        balance += amount;
        cardDatabase[cardNumber].second = balance;
    }

    bool withdraw(int amount) {
        if (amount > balance) {
            return false;
        }
        balance -= amount;
        cardDatabase[cardNumber].second = balance;
        return true;
    }
};

class ATM {
private:
    CardReader cardReader;
    VoicePhishingDetector phishingDetector;

public:
    ATM(const std::string& databaseFilename)
        : cardReader(databaseFilename), phishingDetector(databaseFilename) {}

    void displayMenu() {
        std::cout << "=== ATM 메뉴 ===" << std::endl;
        std::cout << "1. 현금 인출" << std::endl;
        std::cout << "2. 현금 입금" << std::endl;
        std::cout << "3. 송금" << std::endl;
        std::cout << "4. 잔액 조회" << std::endl;
        std::cout << "5. 영수증 인쇄" << std::endl;
        std::cout << "6. 종료" << std::endl;
    }

    void run() {
        while (true) {
            std::string cardNumber;
            bool cardVerified = false;

            while (!cardVerified) {
                std::cout << "카드를 넣어주세요 (프로그램 종료: 'q' 입력): ";
                std::cin >> cardNumber;

                if (cardNumber == "q") {
                    std::cout << "프로그램을 종료합니다." << std::endl;
                    return;
                }

                cardVerified = cardReader.verifyCard(cardNumber);

                if (!cardVerified) {
                    std::cout << "등록되지 않은 카드입니다. 다시 시도해주세요." << std::endl;
                }
            }

            while (true) {
                int choice;
                displayMenu();
                std::cout << "메뉴를 선택하세요: ";
                std::cin >> choice;

                switch (choice) {
                case 1:
                    withdrawCash();
                    break;
                case 2:
                    depositCash();
                    break;
                case 3:
                    transfer();
                    break;
                case 4:
                    checkBalance();
                    break;
                case 5:
                    printReceipt();
                    break;
                case 6:
                    std::cout << "카드번호 입력으로 돌아갑니다." << std::endl;
                    break;
                default:
                    std::cout << "잘못된 메뉴 선택입니다. 다시 선택해주세요." << std::endl;
                }

                if (choice == 6) {
                    break;
                }
            }
        }
    }

    void withdrawCash() {
        int amount;
        std::cout << "인출할 금액을 입력하세요: ";
        std::cin >> amount;
        if (cardReader.withdraw(amount)) {
            std::cout << amount << " 원이 인출되었습니다." << std::endl;
        }
        else {
            std::cout << "잔액이 부족합니다." << std::endl;
        }
    }

    void depositCash() {
        int amount;
        std::cout << "입금할 금액을 입력하세요: ";
        std::cin >> amount;
        cardReader.deposit(amount);
        std::cout << amount << " 원이 입금되었습니다." << std::endl;
    }

    void transfer() {
        std::string toAccount;
        int amount;

        std::cout << "송금할 계좌번호를 입력하세요: ";
        std::cin >> toAccount;

        if (phishingDetector.isVoicePhishingAccount(toAccount)) {
            std::cout << "보이스피싱의심계좌이므로 이용이 불가능합니다." << std::endl;
            return;
        }

        std::cout << "송금할 금액을 입력하세요: ";
        std::cin >> amount;

        if (amount <= 0) {
            std::cout << "잘못된 금액입니다. 다시 입력해주세요." << std::endl;
            return;
        }

        if (amount > cardReader.getBalance()) {
            std::cout << "잔액이 부족합니다." << std::endl;
        }
        else {
            cardReader.withdraw(amount);
            std::cout << amount << " 원을 " << toAccount << " 계좌로 송금했습니다." << std::endl;
            std::cout << "현재 잔액: " << cardReader.getBalance() << " 원" << std::endl;
        }
    }

    void checkBalance() {
        std::string userName = cardReader.getUserName();
        int currentBalance = cardReader.getBalance();
        std::cout << userName << "님의 현재 잔액: " << currentBalance << " 원" << std::endl;
    }

    void printReceipt() {
        std::string userName = cardReader.getUserName();
        int currentBalance = cardReader.getBalance();

        std::cout << "영수증" << std::endl;
        std::cout << "사용자 이름: " << userName << std::endl;
        std::cout << "잔액: " << currentBalance << " 원" << std::endl;
    }
};

int main() {
    std::string databaseFilename = "database.txt";

    ATM atm(databaseFilename);
    atm.run();

    return 0;
}
